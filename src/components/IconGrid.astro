---
---
<div id="icon-grid" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4 mb-[4rem]">
    <!-- Os ícones SVG serão inseridos aqui dinamicamente -->
  </div>
  
  <script>
    interface SVGFilesSelectedEvent extends CustomEvent {
      detail: File[];
    }
  
    document.addEventListener('svgFilesSelected', ((event: SVGFilesSelectedEvent) => {
      const iconGrid = document.getElementById('icon-grid');
      if (!iconGrid) return;
  
      iconGrid.innerHTML = '';
  
      event.detail.forEach((file: File) => {
        const reader = new FileReader();
        reader.onload = (e) => {
          const div = document.createElement('div');
          div.className = 'p-4 rounded-lg flex flex-col items-center';
          
          // Parse o SVG e aplique a cor branca
          const parser = new DOMParser();
          const svgDoc = parser.parseFromString(e.target?.result as string, 'image/svg+xml');
          const svgElement = svgDoc.documentElement;
          
          // Aplique a cor branca a todos os elementos dentro do SVG
          svgElement.querySelectorAll('*').forEach(el => {
            if (el.getAttribute('fill') && el.getAttribute('fill') !== 'none') {
              el.setAttribute('fill', 'white');
            }
            if (el.getAttribute('stroke') && el.getAttribute('stroke') !== 'none') {
              el.setAttribute('stroke', 'white');
            }
          });
  
          // Se o SVG não tiver preenchimento ou traço definido, adicione um preenchimento branco
          if (!svgElement.getAttribute('fill') && !svgElement.getAttribute('stroke')) {
            svgElement.setAttribute('fill', 'white');
          }
  
          div.innerHTML = `
            ${new XMLSerializer().serializeToString(svgElement)}
            <span class="mt-2 text-[0.6rem] text-white">${file.name}</span>
          `;
          iconGrid.appendChild(div);
        };
        reader.readAsText(file);
      });
    }) as EventListener);
  </script>